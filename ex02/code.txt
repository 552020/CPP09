# Compiler and Flags
CXX = c++
CXXFLAGS = -Wall -Wextra -Werror -std=c++98 -I.
DEPFLAGS = -MMD -MP

# Target executable name
TARGET = PmergeMe 

# Source and Object Files
SRCS = main.cpp PmergeMe.cpp

# Create an obj directory if it doesn't exist
OBJDIR = obj

# Generate object files from source files in the obj directory
OBJS = $(addprefix $(OBJDIR)/, $(SRCS:.cpp=.o))
# Build Rules

all: $(TARGET)


$(TARGET): $(OBJS)
	$(CXX) $(CXXFLAGS) -o $(TARGET) $(OBJS)

$(OBJS): | $(OBJDIR)

$(OBJDIR):
	mkdir -p $(OBJDIR)
# Compile source files to object files in the obj directory
$(OBJDIR)/%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(DEPFLAGS) -c $< -o $@

-include $(DEPS)

clean:
	rm -rf $(OBJDIR)
	rm -f $(OBJS) $(TARGET) 

fclean: clean
	rm -f $(TARGET) 

re: fclean all

.PHONY: all  clean fclean re
#include "Pmerge.hpp"

template <typename C>
void fillContainer(std::string const &str, C &c)
{
	std::istringstream iss(str);
	typename C::value_type val;
	while (iss >> val)
	{
		c.push_back(val);
	}
}

template <typename C>
void printContainer(C const &c)
{
	for (typename C::const_iterator it = c.begin(); it != c.end(); ++it)
	{
		std::cout << *it << " ";
	}
	std::cout << std::endl;
}
#include "PmergeMe.hpp"

PmergeMe::PmergeMe()
{
}

PmergeMe::~PmergeMe()
{
}

void PmergeMe::sortVec(std::string &input)
{
	fillContainer(input, _vecNumbers);
	printContainer(_vecNumbers);
}

void PmergeMe::sortList(std::string &input)
{
	fillContainer(input, _listNumbers);
	printContainer(_listNumbers);
}
#ifndef PMERGEME_HPP
#define PMERGEME_HPP

#include <string>
#include <iostream>
#include <vector>
#include <list>

class PmergeMe
{
  public:
	PmergeMe();
	~PmergeMe();

	void sortVed(std::string &input);
	void sortList(std::string &input);

  private:
	std::vector<int> _vecNumbers;
	std::list<int> _listNumbers;
	PmergeMe(const PmergeMe &rhs);
	PmergeMe &operator=(const PmergeMe &rhs);
	template <typename C>
	void fillContainer(std::string &input, C &container);
	template <typename C>
	void printContainer(C &container);
};

#include "Pmerge.tpp"

#endif#include <string>
#include <iostream>
#include "PmergeMe.hpp"

int main(int argc, char **argv)
{
	std::string input;
	if (argc < 2)
	{
		std::cout << "Usage " << argv[0] << " <some numbers>. Only positive numbers. Sign is also not tolerated!"
				  << std::endl;
		return 1;
	}
	else if (argc == 2)
	{
		input = argv[1];
	}
	else
	{
		for (int i = 1; i < argc; ++i)
		{
			// return if argv[i] is not just a number
			std::string tmp(argv[i]);
			if (tmp.find_first_not_of("0123456789") != std::string::npos)
			{
				std::cout << "Invalid input. Only positive numbers are allowed, with no signes. Mixed inputs like '\"1 "
							 "2\" 2' is also not tolerated!"
						  << std::endl;
				return 1;
			}
			if (i > 1)
				input += " ";
			input += argv[i];
		}
	}

	PmergeMe obj;
	obj.sort(input);
	return 0;
}
